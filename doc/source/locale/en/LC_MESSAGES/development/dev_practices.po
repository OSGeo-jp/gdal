# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-01 04:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/development/dev_practices.rst:5
msgid "Development practices"
msgstr ""

#: ../../source/development/dev_practices.rst:8
msgid "Making changes to GDAL"
msgstr ""

#: ../../source/development/dev_practices.rst:10
msgid ""
"Minor changes to GDAL, such as bug fixes, may be made by opening a GitHub"
" pull request."
msgstr ""

#: ../../source/development/dev_practices.rst:12
msgid ""
"Major changes should be discussed on the |gdal-dev| listserv and may "
"require the drafting of a RFC (request for comment) document."
msgstr ""

#: ../../source/development/dev_practices.rst:15
msgid ""
"GDAL's policy on substantial code additions is documented at "
":ref:`rfc-85`."
msgstr ""

#: ../../source/development/dev_practices.rst:18
msgid "Portability"
msgstr ""

#: ../../source/development/dev_practices.rst:20
msgid ""
"GDAL strives to be widely portable to 32 bit and 64 bit computing "
"environments, as well as little-endian and big-endian ordered CPUs. CPL "
"functions in the port directory provide services to abstract platform "
"specific operations."
msgstr ""

#: ../../source/development/dev_practices.rst:25
msgid ""
"Generally speaking, where available CPL functions should be used in "
"preference to operating system functions for operations like memory "
"allocation, path parsing, filesystem I/O (using VSILFILE* / "
"VSIVirtualFile*), ODBC access, etc."
msgstr ""

#: ../../source/development/dev_practices.rst:31
msgid "C/C++ standards"
msgstr ""

#: ../../source/development/dev_practices.rst:33
msgid ""
"The current C and C++ standards adopted by GDAL/OGR are C99 and C++17 "
"(last updated per :ref:`rfc-98`)."
msgstr ""

#: ../../source/development/dev_practices.rst:37
msgid "Variable naming"
msgstr ""

#: ../../source/development/dev_practices.rst:39
msgid ""
"Much of the existing GDAL/OGR code uses an adapted Hungarian naming "
"convention. Use of this convention is not mandatory, but when maintaining"
" code using this convention it is desirable to continue adhering to it "
"with changes. Most importantly, please avoiding using it improperly as "
"that can be very confusing."
msgstr ""

#: ../../source/development/dev_practices.rst:45
msgid ""
"In Hungarian prefixing the prefix tells something about about the type, "
"and potentially semantics of a variable. The following are some prefixes "
"used in GDAL/OGR."
msgstr ""

#: ../../source/development/dev_practices.rst:49
msgid "*a*: array"
msgstr ""

#: ../../source/development/dev_practices.rst:50
msgid ""
"*b*: C/C++ bool. In C code that pre-dates C99 adoption, it is also used "
"for ints with only TRUE/FALSE values."
msgstr ""

#: ../../source/development/dev_practices.rst:51
msgid "*by*: byte (GByte / unsigned char)."
msgstr ""

#: ../../source/development/dev_practices.rst:52
msgid "*df*: floating point value (double precision)"
msgstr ""

#: ../../source/development/dev_practices.rst:53
msgid "*e*: enumeration"
msgstr ""

#: ../../source/development/dev_practices.rst:54
msgid "*i*: integer number used as a zero based array or loop index."
msgstr ""

#: ../../source/development/dev_practices.rst:55
msgid "*f*: floating point value (single precision)"
msgstr ""

#: ../../source/development/dev_practices.rst:56
msgid "*h*: an opaque handle (such as GDALDatasetH)."
msgstr ""

#: ../../source/development/dev_practices.rst:57
msgid "*n*: integer number (size unspecified)"
msgstr ""

#: ../../source/development/dev_practices.rst:58
msgid "*o*: C++ object"
msgstr ""

#: ../../source/development/dev_practices.rst:59
msgid "*os*: CPLString or std::string"
msgstr ""

#: ../../source/development/dev_practices.rst:60
msgid "*p*: pointer"
msgstr ""

#: ../../source/development/dev_practices.rst:61
msgid "*psz*: pointer to a null-terminated string. (eg. \"char \\*pszName;\")"
msgstr ""

#: ../../source/development/dev_practices.rst:62
msgid "*sz*: null-terminated string (eg.\" char szName[100];\")"
msgstr ""

#: ../../source/development/dev_practices.rst:63
msgid "*k*: compile-time constant"
msgstr ""

#: ../../source/development/dev_practices.rst:65
msgid ""
"Prefixes can be stacked. The following are some examples of meaningful "
"variables."
msgstr ""

#: ../../source/development/dev_practices.rst:68
msgid "\\*char !\\*\\ *papszTokens*: Pointer to an array of strings."
msgstr ""

#: ../../source/development/dev_practices.rst:69
msgid "\\*int *panBands*: Pointer to the first element of an array of numbers."
msgstr ""

#: ../../source/development/dev_practices.rst:71
msgid ""
"\\*double *padfScanline*: Pointer to the first element of an array of "
"doubles."
msgstr ""

#: ../../source/development/dev_practices.rst:73
msgid "\\*double *pdfMeanRet*: Pointer to a single double."
msgstr ""

#: ../../source/development/dev_practices.rst:74
msgid "\\*GDALRasterBand *poBand*: Pointer to a single object."
msgstr ""

#: ../../source/development/dev_practices.rst:75
msgid "\\*GByte *pabyHeader*: Pointer to an array of bytes."
msgstr ""

#: ../../source/development/dev_practices.rst:77
msgid ""
"It may also be noted that the standard convention for variable names is "
"to capitalize each word in a variable name."
msgstr ""

#: ../../source/development/dev_practices.rst:81
msgid "Function and class naming"
msgstr ""

#: ../../source/development/dev_practices.rst:83
msgid ""
"Functions and classes should have a selective enough namespace (\"GDAL\" "
"or \"OGR\" prefix, or use of C++ namespace) to avoid symbol collision."
msgstr ""

#: ../../source/development/dev_practices.rst:86
msgid "File naming and code formatting"
msgstr ""

#: ../../source/development/dev_practices.rst:88
msgid ""
"All source files (.h, .c, .cpp, .py, etc.) should have a header with "
"copyright attribution and the text of the GDAL X/MIT license."
msgstr ""

#: ../../source/development/dev_practices.rst:89
msgid "Use lower case filenames."
msgstr ""

#: ../../source/development/dev_practices.rst:90
msgid "Use .cpp extension for C++ files (not .cc)."
msgstr ""

#: ../../source/development/dev_practices.rst:91
msgid ""
"C/C++ code formatting rules are defined in :source_file:`.clang-format`. "
"Python code formatting is enforced by Black. The pre-commit utility "
"should be used to enforce them automatically. See :ref:`commit_hooks`."
msgstr ""

#: ../../source/development/dev_practices.rst:95
msgid "Memory allocation"
msgstr ""

#: ../../source/development/dev_practices.rst:97
msgid ""
"Large memory allocations should be performed using the "
":cpp:func:`VSIMalloc` family of functions, which will return ``nullptr`` "
"on allocation failure. As per :ref:`rfc-19`, you can use ``VSIMalloc2(x, "
"y)`` instead of doing ``CPLMalloc(x * y)`` or ``VSIMalloc(x * y)``. "
":cpp:func:`VSIMalloc2` will detect potential overflows in the "
"multiplication and return a NULL pointer if it happens. This can be "
"useful in GDAL raster drivers where x and y are related to the raster "
"dimensions or raster block sizes. Similarly, ``VSIMalloc3(x, y, z)`` can "
"be used as a replacement for ``CPLMalloc(x * y * z)``."
msgstr ""

#: ../../source/development/dev_practices.rst:105
msgid ""
"When working with standard library data structures such as "
"``std::vector`` that may throw ``std::bad_alloc``, a try/catch block "
"should be used around blocks that may allocate a large amount of memory."
msgstr ""

#: ../../source/development/dev_practices.rst:108
msgid "Adding a new driver"
msgstr ""

#: ../../source/development/dev_practices.rst:110
msgid ""
"If the driver depends on a third-party library, compilation of the driver"
" must be made conditional on the presence of the library. Drivers should "
"try to re-use existing library dependencies as much as possible, e.g. "
"Expat for SAX XML parsing."
msgstr ""

#: ../../source/development/dev_practices.rst:111
msgid ""
"For a vector driver, check that the Open() method of the driver (often "
"delegated to a Open() method of the datasource) is selective enough (i.e."
" it will not accept data files that are not meant for the driver), and "
"robust enough (it will not crash for small variations w.r.t content that "
"it would recognize). Check that it can deal with unusual filenames. For a"
" GDAL driver, similar checks, as well for the optional Identify() method."
msgstr ""

#: ../../source/development/dev_practices.rst:112
msgid ""
"A set of tests covering the driver should be added to the Python test "
"suite. If appropriate, small sample data files may be added to "
"autotest/gdrivers/data or autotest/ogr/data. The ``test_ogrsf`` utility "
"and ``GDALTest`` class may simplify testing of basic driver "
"functionality."
msgstr ""

#: ../../source/development/dev_practices.rst:113
msgid ""
"A documentation page should be created for the driver. Documentation "
"should, at a minimum, briefly describe the format handled by the driver "
"and, when relevant, describe the particular syntax for the connection "
"string, creation options, configuration options, etc. The documentation "
"should provide a link to a more detailed format description and mention "
"needed third-party libraries."
msgstr ""

#: ../../source/development/dev_practices.rst:116
msgid "Writing tests"
msgstr ""

#: ../../source/development/dev_practices.rst:118
msgid "See :ref:`writing_tests`."
msgstr ""

#: ../../source/development/dev_practices.rst:121
msgid "Git usage"
msgstr ""

#: ../../source/development/dev_practices.rst:123
msgid ""
"This section collects a few best practices for git usage for GDAL "
"development."
msgstr ""

#: ../../source/development/dev_practices.rst:126
msgid "Initiating your work repository"
msgstr ""

#: ../../source/development/dev_practices.rst:128
msgid "Fork |OSGeo/gdal| from the GitHub UI, and then run:"
msgstr ""

#: ../../source/development/dev_practices.rst:137
msgid "Working with a feature branch"
msgstr ""

#: ../../source/development/dev_practices.rst:173
msgid "From the GitHub UI, issue a pull request."
msgstr ""

#: ../../source/development/dev_practices.rst:175
msgid ""
"If the pull request discussion or automated checks require changes, "
"commit locally and push. To get a reasonable history, you may need to "
"combine commits using ``git rebase -i master``, in which case you will "
"have to force-push your branch with ``git push -f my_user_name "
"my_new_feature_branch``."
msgstr ""

#: ../../source/development/dev_practices.rst:182
msgid "Updating your local master against upstream master"
msgstr ""

#: ../../source/development/dev_practices.rst:193
msgid "Commit messages"
msgstr ""

#: ../../source/development/dev_practices.rst:195
msgid ""
"Commit messages should indicate a component name (eg a driver name), a "
"short description, and when relevant, a reference to a issue (with 'fixes"
" #' if it actually fixes it)"
msgstr ""

#: ../../source/development/dev_practices.rst:208
msgid "Commit hooks"
msgstr ""

#: ../../source/development/dev_practices.rst:210
msgid ""
"GDAL provides pre-commit hooks to run code formatters and linters before "
"a commit is made. The hooks are cloned with the repository and can be "
"installed using `pre-commit <https://pre-commit.com>`_:"
msgstr ""

#: ../../source/development/dev_practices.rst:220
msgid ""
"Once installed, the hooks can be run manually via ``pre-commit run --all-"
"files``."
msgstr ""

#: ../../source/development/dev_practices.rst:223
msgid "Blame ignore file"
msgstr ""

#: ../../source/development/dev_practices.rst:225
msgid ""
"Due to whole-tree code reformatting done during GDAL 3.7 development, "
"``git blame`` information might be misleading. To avoid that, you need to"
" modify your git configuration as following to ignore the revision of the"
" whole-tree reformatting:"
msgstr ""

#: ../../source/development/dev_practices.rst:236
msgid "Backporting bugfixes from master to a stable branch"
msgstr ""

#: ../../source/development/dev_practices.rst:248
msgid "If changes are needed, do them and ``git commit -a --amend``"
msgstr ""

#: ../../source/development/dev_practices.rst:252
msgid "Things you should NOT do"
msgstr ""

#: ../../source/development/dev_practices.rst:254
msgid ""
"(For anyone with push rights to |OSGeo/gdal|) Never modify a commit or "
"the history of anything that has been committed to "
"https://github.com/OSGeo/gdal"
msgstr ""

#: ../../source/development/dev_practices.rst:258
msgid ""
"Committing symbolic links is allowed only under the .github directory in "
"order to avoid potential problems on Windows."
msgstr ""

