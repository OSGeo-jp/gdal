# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-31 22:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/drivers/vector/arrow.rst:4
msgid "(Geo)Arrow IPC File Format / Stream"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:-1
msgid "Driver short name"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:8
msgid "Arrow"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:-1
msgid "Build dependencies"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:10
msgid "Apache Arrow C++ library"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:12
msgid ""
"The Arrow IPC File Format (Feather) is a portable file format for storing"
" Arrow tables or data frames (from languages like Python or R) that "
"utilizes the Arrow IPC format internally."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:16
msgid "The driver supports the 2 variants of the format:"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:18
msgid ""
"File or Random Access format, also known as Feather: for serializing a "
"fixed number of record batches. Random access is required to read such "
"files, but they can be generated using a streaming-only capable file. The"
" recommended extension for such file is ``.arrow``"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:23
msgid ""
"Streaming IPC format: for sending an arbitrary length sequence of record "
"batches. The format must generally be processed from start to end, and "
"does not require random access. That format is not generally materialized"
" as a file. If it is, the recommended extension is ``.arrows`` (with a "
"trailing s). But the driver can support regular files as well as the "
"/vsistdin/ and /vsistdout/ streaming files. On opening, it might "
"difficult for the driver to detect that the content is specifically a "
"Arrow IPC stream, especially if the extension is not ``.arrows``, and the"
" metadata section is large. Prefixing the filename with "
"``ARROW_IPC_STREAM:`` (e.g \"ARROW_IPC_STREAM:/vsistdin/\") will cause "
"the driver to unconditionally open the file as a streaming IPC format. "
"Alternatively, starting with GDAL 3.10, specifying the ``-if ARROW`` "
"option to command line utilities accepting it, or ``ARROW`` as the only "
"value of the ``papszAllowedDrivers`` of :cpp:func:`GDALOpenEx`, also "
"forces the driver to recognize the passed filename."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:39
msgid ""
"This driver also supports geometry columns using the GeoArrow "
"specification."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:41
msgid ""
"The driver should be considered experimental as the GeoArrow "
"specification is not finalized yet."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:44
msgid "Driver capabilities"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:53
msgid "Creation issues"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:55
msgid "The driver supports creating only a single layer in a dataset."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:58
msgid "Layer creation options"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:60
msgid ""
"|about-layer-creation-options| The following layer creation options are "
"supported:"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:111
msgid "Conda-forge package"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:113
msgid ""
"The driver can be installed as a plugin for the ``libgdal`` conda-forge "
"package with:"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:120
msgid "Standalone plugin compilation"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:124
msgid ""
"While this driver may be built as part of a whole GDAL build, either in "
"libgdal itself, or as a plugin, it is also possible to only build this "
"driver as a plugin, against an already built libgdal."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:128
msgid ""
"The version of the GDAL sources used to build the driver must match the "
"version of the libgdal it is built against."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:131
msgid ""
"For example, from a \"build_arrow\" directory under the root of the GDAL "
"source tree:"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:139
msgid ""
"Note that such a plugin, when used against a libgdal not aware of it, "
"will be systematically loaded at GDAL driver initialization time, and "
"will not benefit from `deferred plugin loading capabilities <rfc-96>`. "
"For that, libgdal itself must be built with the CMake variable "
"OGR_REGISTER_DRIVER_ARROW_FOR_LATER_PLUGIN=ON set."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:145
msgid "Arrow VSI file system"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:149
msgid ""
"Starting with GDAL 3.10 and Arrow 16.0, any GDAL Virtual File System can "
"be used (in a read-only context) wherever the Arrow C++ library expects a"
" URI, in particular outside of the context of the OGR Arrow driver, by:"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:153
msgid ""
"loading the libgdal.so/dll library (or the ogr_Arrow.so/dll plugin "
"library if the Arrow driver is built as a library) with the "
"arrow::fs::LoadFileSystemFactories() function (cf `Defining new "
"filesystems <https://arrow.apache.org/docs/cpp/io.html#defining-new-"
"filesystems>`__) Note: if the Arrow driver is fully loaded, e.g. by "
"querying "
"GetGDALDriverManager()->GetDriverByName(\"ARROW\")->GetMetadata(), the "
"Arrow VSI file system will be also registered."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:160
msgid ""
"Prefixing any GDAL file name with the ``gdalvsi://`` URI scheme prefix. "
"In addition to any potential vsi prefix in the GDAL file name. So the "
"``/vsicurl/http://example.com`` GDAL file name becomes the "
"``gdalvsi:///vsicurl/http://example.com`` Arrow URI."
msgstr ""

#: ../../source/drivers/vector/arrow.rst:165
msgid "Links"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:167
msgid ""
"`Feather File Format "
"<https://arrow.apache.org/docs/python/feather.html>`__"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:169
msgid "`GeoArrow specification <https://github.com/geopandas/geo-arrow-spec>`__"
msgstr ""

#: ../../source/drivers/vector/arrow.rst:171
msgid "Related driver: :ref:`Parquet driver <vector.parquet>`"
msgstr ""

#~ msgid ""
#~ "Prefixing any GDAL file name with "
#~ "the ``vsi://`` URI scheme prefix. In "
#~ "addition to any potential vsi prefix "
#~ "in the GDAL file name. So the "
#~ "``/vsicurl/http://example.com`` GDAL file name "
#~ "becomes the ``vsi:///vsicurl/http://example.com`` "
#~ "Arrow URI."
#~ msgstr ""

