# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-01 04:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator:Yoichi Kayama<yoichi.kayama@gmail.com>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/tutorials/raster_api_tut.rst:5
msgid "Raster API tutorial"
msgstr "ラスターAPIチュートリアル"

#: ../../source/tutorials/raster_api_tut.rst:8
msgid "Opening the File"
msgstr "ファイルを開きます"

#: ../../source/tutorials/raster_api_tut.rst:10
msgid ""
"Before opening a GDAL supported raster datastore it is necessary to "
"register drivers. There is a driver for each supported format. Normally "
"this is accomplished with the :cpp:func:`GDALAllRegister` function which "
"attempts to register all known drivers, including those auto-loaded from "
".so files using :cpp:func:`GDALDriverManager::AutoLoadDrivers`. If for "
"some applications it is necessary to limit the set of drivers it may be "
"helpful to review the code from gdalallregister.cpp. Python automatically"
" calls GDALAllRegister() when the gdal module is imported."
msgstr ""
"GDALでサポートされているラスターデータストアを開く前に,ドライバを登録する"
"必要があります.各サポートされているフォーマットに対してドライバがあります."
"通常,これは,すべての既知のドライバを登録しようとする :cpp:func:`GDALAllRegister` "
"関数で行われます.これには. :cpp:func:`GDALDriverManager::AutoLoadDrivers` を使って"
".soファイルから自動的にロードされるドライバも含まれます.一部のアプリケーションで"
"ドライバのセットを制限する必要がある場合は.gdalallregister.cppからのコードを"
"確認すると役立つかもしれません。Pythonは.gdalモジュールがインポートされると"
"自動的にGDALAllRegister()を呼び出します."

#: ../../source/tutorials/raster_api_tut.rst:12
msgid ""
"Once the drivers are registered, the application should call the free "
"standing :cpp:func:`GDALOpen` function to open a dataset, passing the "
"name of the dataset and the access desired (GA_ReadOnly or GA_Update)."
msgstr ""
"ドライバが登録されたら,アプリケーションは,データセットを開くために独立した"
" :cpp:func:`GDALOpen` 関数を呼び出すべきです.データセットの名前とアクセス"
"したいもの(GA_ReadOnly または GA_Update)を渡します."

#: ../../source/tutorials/raster_api_tut.rst:14
#: ../../source/tutorials/raster_api_tut.rst:98
#: ../../source/tutorials/raster_api_tut.rst:163
#: ../../source/tutorials/raster_api_tut.rst:241
#: ../../source/tutorials/raster_api_tut.rst:314
#: ../../source/tutorials/raster_api_tut.rst:369
#: ../../source/tutorials/raster_api_tut.rst:410
#: ../../source/tutorials/raster_api_tut.rst:458
#: ../../source/tutorials/raster_api_tut.rst:485
msgid "In C++:"
msgstr "C++の場合:"

#: ../../source/tutorials/raster_api_tut.rst:40
#: ../../source/tutorials/raster_api_tut.rst:119
#: ../../source/tutorials/raster_api_tut.rst:190
#: ../../source/tutorials/raster_api_tut.rst:254
#: ../../source/tutorials/raster_api_tut.rst:332
#: ../../source/tutorials/raster_api_tut.rst:383
#: ../../source/tutorials/raster_api_tut.rst:426
#: ../../source/tutorials/raster_api_tut.rst:467
#: ../../source/tutorials/raster_api_tut.rst:506
msgid "In C:"
msgstr "Cの場合:"

#: ../../source/tutorials/raster_api_tut.rst:67
#: ../../source/tutorials/raster_api_tut.rst:143
#: ../../source/tutorials/raster_api_tut.rst:217
#: ../../source/tutorials/raster_api_tut.rst:267
#: ../../source/tutorials/raster_api_tut.rst:349
#: ../../source/tutorials/raster_api_tut.rst:396
#: ../../source/tutorials/raster_api_tut.rst:442
#: ../../source/tutorials/raster_api_tut.rst:476
#: ../../source/tutorials/raster_api_tut.rst:529
msgid "In Python:"
msgstr "Pythonの場合:"

#: ../../source/tutorials/raster_api_tut.rst:76
msgid ""
"Note that if :cpp:func:`GDALOpen` returns NULL it means the open failed, "
"and that an error messages will already have been emitted via "
":cpp:func:`CPLError`. If you want to control how errors are reported to "
"the user review the :cpp:func:`CPLError` documentation. Generally "
"speaking all of GDAL uses :cpp:func:`CPLError` for error reporting. Also,"
" note that pszFilename need not actually be the name of a physical file "
"(though it usually is). It's interpretation is driver dependent, and it "
"might be an URL, a filename with additional parameters added at the end "
"controlling the open or almost anything. Please try not to limit GDAL "
"file selection dialogs to only selecting physical files."
msgstr ""
" :cpp:func:`GDALOpen` がNULLを返すと,オープンに失敗したことを意味し,エラーメッセージ"
"はすでに :cpp:func:`CPLError` を介して出力されていることに注意してください.エラー"
"の報告方法を制御したい場合は, :cpp:func:`CPLError` のドキュメントを確認してください."
"一般的に,すべてのGDALはエラー報告に :cpp:func:`CPLError` を使用しています.また,"
"pszFilenameは実際には物理ファイルの名前である必要はありません(通常はそうです)."

#: ../../source/tutorials/raster_api_tut.rst:79
msgid "Getting Dataset Information"
msgstr "データセット情報の取得"

#: ../../source/tutorials/raster_api_tut.rst:81
msgid ""
"As described in the :ref:`raster_data_model`, a :cpp:class:`GDALDataset` "
"contains a list of raster bands, all pertaining to the same area, and "
"having the same resolution. It also has metadata, a coordinate system, a "
"georeferencing transform, size of raster and various other information."
msgstr ""
" :ref:`raster_data_model` で説明されているように, :cpp:class:`GDALDataset` は"
"同じ領域に関連するラスターバンドのリストを含み,同じ解像度を持っています."
"また,メタデータ,座標系,ジオリファレンス変換,ラスターサイズおよびその他の情報が"
"含まれています."

#: ../../source/tutorials/raster_api_tut.rst:83
msgid ""
"In the particular, but common, case of a \"north up\" image without any "
"rotation or shearing, the georeferencing transform "
":ref:`geotransforms_tut` takes the following form :"
msgstr ""
"特に,一般的な\"北向き\"画像で回転やシアリングがない場合,ジオリファレンス変換"
" :ref:`geotransforms_tut` は以下の形式を取ります:"

#: ../../source/tutorials/raster_api_tut.rst:94
msgid "In the general case, this is an affine transform."
msgstr "一般的な場合,これはアフィン変換です."

#: ../../source/tutorials/raster_api_tut.rst:96
msgid ""
"If we wanted to print some general information about the dataset we might"
" do the following:"
msgstr ""
"データセットに関する一般的な情報を表示したい場合は,以下のようにします:"

#: ../../source/tutorials/raster_api_tut.rst:159
msgid "Fetching a Raster Band"
msgstr "ラスターバンドの取得"

#: ../../source/tutorials/raster_api_tut.rst:161
msgid ""
"At this time access to raster data via GDAL is done one band at a time. "
"Also, there is metadata, block sizes, color tables, and various other "
"information available on a band by band basis. The following codes "
"fetches a :cpp:class:`GDALRasterBand` object from the dataset (numbered 1"
" through :cpp:func:`GDALRasterBand::GetRasterCount`) and displays a "
"little information about it."
msgstr ""
"この時点でGDALを介したラスターデータへのアクセスは,1つのバンドずつ行われます."
"また,メタデータ,ブロックサイズ,カラーテーブルおよびその他の情報がバンドごとに利用"
"可能です.以下のコードは,データセットから :cpp:class:`GDALRasterBand` オブジェクトを"
"取得し(1から :cpp:func:`GDALRasterBand::GetRasterCount` までの番号),それについて少し"
"の情報を表示します."

#: ../../source/tutorials/raster_api_tut.rst:237
msgid "Reading Raster Data"
msgstr "ラスターデータの読み込み"

#: ../../source/tutorials/raster_api_tut.rst:239
msgid ""
"There are a few ways to read raster data, but the most common is via the "
":cpp:func:`GDALRasterBand::RasterIO` method. This method will "
"automatically take care of data type conversion, up/down sampling and "
"windowing. The following code will read the first scanline of data into a"
" similarly sized buffer, converting it to floating point as part of the "
"operation."
msgstr ""
"ラスターデータを読み込む方法はいくつかありますが,最も一般的なのは :cpp:func:`GDALRasterBand::RasterIO` "
"メソッドを介してです.このメソッドは,データ型の変換,アップ/ダウンサンプリングおよびウィンドウ処理を"
"自動的に処理します.以下のコードは,データの最初のスキャンラインを同じサイズのバッファに読み込み,"
"その操作の一環として浮動小数点に変換します."

#: ../../source/tutorials/raster_api_tut.rst:252
#: ../../source/tutorials/raster_api_tut.rst:265
msgid ""
"The pafScanline buffer should be freed with CPLFree() when it is no "
"longer used."
msgstr ""
"pafScanlineバッファは,使用しなくなったときにCPLFree()で解放する必要があります."

#: ../../source/tutorials/raster_api_tut.rst:276
msgid ""
"Note that the returned scanline is of type string, and contains xsize*4 "
"bytes of raw binary floating point data. This can be converted to Python "
"values using the struct module from the standard library:"
msgstr ""
"返されたスキャンラインは文字列型であり,xsize*4バイトの生のバイナリ浮動小数点データが含まれています."
"これは,標準ライブラリのstructモジュールを使用してPythonの値に変換できます:"

#: ../../source/tutorials/raster_api_tut.rst:283
msgid "The RasterIO call takes the following arguments."
msgstr "RasterIO呼び出しは以下の引数を取ります."

#: ../../source/tutorials/raster_api_tut.rst:294
msgid ""
"Note that the same RasterIO() call is used to read, or write based on the"
" setting of eRWFlag (either GF_Read or GF_Write). The nXOff, nYOff, "
"nXSize, nYSize argument describe the window of raster data on disk to "
"read (or write). It doesn't have to fall on tile boundaries though access"
" may be more efficient if it does."
msgstr ""
"eRWFlagの設定に基づいて読み込みまたは書き込みに使用する同じRasterIO()呼び出しが"
"使用されることに注意してください(いずれかGF_ReadまたはGF_Write).nXOff, nYOff, "
"nXSize, nYSize引数は,ディスク上のラスターデータのウィンドウを読み取る(または書き込む)"
"ために使用されます.タイルの境界にある必要はありませんが,アクセスが効率的であるかもしれません."

#: ../../source/tutorials/raster_api_tut.rst:296
msgid ""
"The pData is the memory buffer the data is read into, or written from. "
"It's real type must be whatever is passed as eBufType, such as "
"GDT_Float32, or GDT_Byte. The RasterIO() call will take care of "
"converting between the buffer's data type and the data type of the band. "
"Note that when converting floating point data to integer RasterIO() "
"rounds down, and when converting source values outside the legal range of"
" the output the nearest legal value is used. This implies, for instance, "
"that 16bit data read into a GDT_Byte buffer will map all values greater "
"than 255 to 255, the data is not scaled!"
msgstr ""
"pDataは,データが読み込まれるまたは書き込まれるメモリバッファです.実際の型は,eBufTypeとして"
"渡されるものである必要があります.例えば,GDT_Float32またはGDT_Byteなどです. RasterIO() "
"呼び出しは,バッファのデータ型とバンドのデータ型の間の変換を処理します.浮動小数点データを整数に"
"変換する場合,RasterIO()は切り捨てを行い,出力の許容範囲外のソース値を変換する場合,最も近い許容値が"
"使用されます.これは,例えば,GDT_Byteバッファに読み込まれた16ビットデータは,255を超えるすべての値を"
"255にマップし,データはスケーリングされません!"

#: ../../source/tutorials/raster_api_tut.rst:298
msgid ""
"The nBufXSize and nBufYSize values describe the size of the buffer. When "
"loading data at full resolution this would be the same as the window "
"size. However, to load a reduced resolution overview this could be set to"
" smaller than the window on disk. In this case the RasterIO() will "
"utilize overviews to do the IO more efficiently if the overviews are "
"suitable."
msgstr ""
"nBufXSizeとnBufYSizeの値は,バッファのサイズを示します.データを完全な解像度で読み込む場合,"
"これはウィンドウサイズと同じになります.ただし,低解像度の概要を読み込む場合,これはディスク上の"
"ウィンドウよりも小さく設定することができます.この場合,RasterIO()は,適切な場合には概要を利用して,"
"IOを効率的に行います."

#: ../../source/tutorials/raster_api_tut.rst:300
msgid ""
"The nPixelSpace, and nLineSpace are normally zero indicating that default"
" values should be used. However, they can be used to control access to "
"the memory data buffer, allowing reading into a buffer containing other "
"pixel interleaved data for instance."
msgstr ""
"通常はゼロであり,デフォルト値を使用することを示すnPixelSpaceとnLineSpaceです.ただし,"
"他のピクセル間データを含むバッファに読み込むことを許可するために,メモリデータバッファへの"
"アクセスを制御するために使用することができます."

#: ../../source/tutorials/raster_api_tut.rst:303
msgid "Closing the Dataset"
msgstr "データセットを閉じる"

#: ../../source/tutorials/raster_api_tut.rst:305
msgid ""
"Please keep in mind that :cpp:class:`GDALRasterBand` objects are owned by"
" their dataset, and they should never be destroyed with the C++ delete "
"operator. :cpp:class:`GDALDataset`'s can be closed by calling "
":cpp:func:`GDALClose` (it is NOT recommended to use the delete operator "
"on a GDALDataset for Windows users because of known issues when "
"allocating and freeing memory across module boundaries. See the relevant "
"topic on the FAQ). Calling GDALClose will result in proper cleanup, and "
"flushing of any pending writes. Forgetting to call GDALClose on a dataset"
" opened in update mode in a popular format like GTiff will likely result "
"in being unable to open it afterwards."
msgstr ""
":cpp:class:`GDALRasterBand` オブジェクトはデータセットによって所有されており,決してC++の"
"delete演算子で破棄してはいけません. :cpp:class:`GDALDataset` は, :cpp:func:`GDALClose` を"
"呼び出すことで閉じることができます(Windowsユーザーは,モジュール境界を越えてメモリを割り当て"
"および解放する際の既知の問題のため,GDALDatasetに対してdelete演算子を使用することは推奨されません."
"FAQの関連トピックを参照してください).GDALCloseを呼び出すと,適切なクリーンアップと,保留中の書き込み"
"のフラッシュが行われます.人気のあるフォーマットで開いたデータセットを更新モードで開いた場合にGDALClose"
"を呼び出し忘れると,その後開くことができなくなる可能性が高いです."

#: ../../source/tutorials/raster_api_tut.rst:308
msgid "Techniques for Creating Files"
msgstr "ファイルを作成するためのテクニック"

#: ../../source/tutorials/raster_api_tut.rst:310
msgid ""
"New files in GDAL supported formats may be created if the format driver "
"supports creation. There are two general techniques for creating files, "
"using CreateCopy() and Create(). The CreateCopy method involves calling "
"the CreateCopy() method on the format driver, and passing in a source "
"dataset that should be copied. The Create method involves calling the "
"Create() method on the driver, and then explicitly writing all the "
"metadata, and raster data with separate calls. All drivers that support "
"creating new files support the CreateCopy() method, but only a few "
"support the Create() method."
msgstr ""
"GDALでサポートされているフォーマットで新しいファイルを作成することができます."
"フォーマットドライバが作成をサポートしている場合,ファイルを作成するための2つの一般的な"
"テクニックがあります. CreateCopy() と Create() です. CreateCopyメソッドは,フォーマット"
"ドライバ上でCreateCopy()メソッドを呼び出し,コピーする必要があるソースデータセットを"
"渡すことを含みます. Createメソッドは,ドライバ上でCreate()メソッドを呼び出し,すべての"
"メタデータとラスターデータを明示的に別々の呼び出しで書き込むことを含みます.新しいファイルを"
"作成することをサポートするすべてのドライバは,CreateCopy()メソッドをサポートしていますが,"
"Create()メソッドをサポートしているのはわずかです."

#: ../../source/tutorials/raster_api_tut.rst:312
msgid ""
"To determine if a particular format supports Create or CreateCopy it is "
"possible to check the DCAP_CREATE and DCAP_CREATECOPY metadata on the "
"format driver object. Ensure that :cpp:func:`GDALAllRegister` has been "
"called before calling :cpp:func:`GDALDriverManager::GetDriverByName`. In "
"this example we fetch a driver, and determine whether it supports "
"Create() and/or CreateCopy()."
msgstr ""
"特定のフォーマットがCreateまたはCreateCopyをサポートしているかどうかを判断するには,"
"フォーマットドライバオブジェクトのDCAP_CREATEおよびDCAP_CREATECOPYメタデータを確認することが"
"可能です. :cpp:func:`GDALDriverManager::GetDriverByName` を呼び出す前に, :cpp:func:`GDALAllRegister` "
"が呼び出されていることを確認してください.この例では,ドライバを取得し,Create()および/または"
"CreateCopy()をサポートしているかどうかを判断します."

#: ../../source/tutorials/raster_api_tut.rst:362
msgid ""
"Note that a number of drivers are read-only and won't support Create() or"
" CreateCopy()."
msgstr ""
"多くのドライバは読み取り専用であり,Create()またはCreateCopy()をサポートしません."

#: ../../source/tutorials/raster_api_tut.rst:365
msgid "Using CreateCopy()"
msgstr "CreateCopy()の使用"

#: ../../source/tutorials/raster_api_tut.rst:367
msgid ""
"The :cpp:func:`GDALDriver::CreateCopy` method can be used fairly simply "
"as most information is collected from the source dataset. However, it "
"includes options for passing format specific creation options, and for "
"reporting progress to the user as a long dataset copy takes place. A "
"simple copy from the a file named pszSrcFilename, to a new file named "
"pszDstFilename using default options on a format whose driver was "
"previously fetched might look like this:"
msgstr ""
" :cpp:func:`GDALDriver::CreateCopy` メソッドは,ほとんどの情報がソースデータセットから収集されるため,"
"かなり簡単に使用できます.ただし,フォーマット固有の作成オプションを渡すためのオプションが含まれており,"
"長いデータセットのコピーが行われる際にユーザーに進行状況を報告するためのオプションも含まれています."
"以前に取得したドライバのフォーマットを使用して,ファイル名がpszSrcFilenameであるファイルから,"
"pszDstFilenameという新しいファイルにデフォルトオプションを使用して単純なコピーを行う場合は,"
"次のようになります:"

#: ../../source/tutorials/raster_api_tut.rst:406
msgid ""
"Note that the CreateCopy() method returns a writable dataset, and that it"
" must be closed properly to complete writing and flushing the dataset to "
"disk. In the Python case this occurs automatically when \"dst_ds\" goes "
"out of scope. The FALSE (or 0) value used for the bStrict option just "
"after the destination filename in the CreateCopy() call indicates that "
"the CreateCopy() call should proceed without a fatal error even if the "
"destination dataset cannot be created to exactly match the input dataset."
" This might be because the output format does not support the pixel "
"datatype of the input dataset, or because the destination cannot support "
"writing georeferencing for instance."
msgstr ""
"CreateCopy()メソッドは書き込み可能なデータセットを返し,データセットを書き込みおよびディスクに"
"フラッシュするために適切に閉じる必要があります. Pythonの場合,これは\"dst_ds\"がスコープ外に"
"なると自動的に発生します. CreateCopy()呼び出しの宛先ファイル名の直後に使用されるbStrictオプション"
"のFALSE(または0)値は,宛先データセットが入力データセットと完全に一致するように作成できない場合でも,"
"CreateCopy()呼び出しが致命的なエラーなしで続行することを示します.これは,出力フォーマットが入力データセット"
"のピクセルデータ型をサポートしていない場合や,宛先がジオリファレンスの書き込みをサポートしていない場合などが"
"考えられます."

#: ../../source/tutorials/raster_api_tut.rst:408
msgid ""
"A more complex case might involve passing creation options, and using a "
"predefined progress monitor like this:"
msgstr ""
"より複雑な場合は,作成オプションを渡し,次のように事前定義された進行モニタを使用することができます:"

#: ../../source/tutorials/raster_api_tut.rst:454
msgid "Using Create()"
msgstr "Create()の使用"

#: ../../source/tutorials/raster_api_tut.rst:456
msgid ""
"For situations in which you are not just exporting an existing file to a "
"new file, it is generally necessary to use the "
":cpp:func:`GDALDriver::Create` method (though some interesting options "
"are possible through use of virtual files or in-memory files). The "
"Create() method takes an options list much like CreateCopy(), but the "
"image size, number of bands and band type must be provided explicitly."
msgstr ""
"既存のファイルを新しいファイルにエクスポートするだけでない状況では,通常は "
" :cpp:func:`GDALDriver::Create` メソッドを使用する必要があります(ただし,仮想ファイルや"
"インメモリファイルを使用することでいくつかの興味深いオプションが可能です).Create()メソッドは,"
"CreateCopy()と同様のオプションリストを取りますが,画像サイズ,バンド数およびバンドタイプは"
"明示的に指定する必要があります."

#: ../../source/tutorials/raster_api_tut.rst:483
msgid ""
"Once the dataset is successfully created, all appropriate metadata and "
"raster data must be written to the file. What this is will vary according"
" to usage, but a simple case with a projection, geotransform and raster "
"data is covered here."
msgstr ""
"データセットが正常に作成されると,すべての適切なメタデータとラスターデータをファイルに書き込む必要があります."
"これは使用方法によって異なりますが,投影,ジオリファレンスおよびラスターデータを持つ単純なケースがここで"
"説明されています."

