# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2024
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-01 04:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Yoichi Kayama <yoichi.kayama@gmail.com>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/user/vector_data_model.rst:5
msgid "Vector Data Model"
msgstr "ベクターデーターモデル"

#: ../../source/user/vector_data_model.rst:7
msgid ""
"This page documents the classes used to handle vector data. Many data "
"types and method names are based on the OGC Simple Features data model, "
"so it may be helpful to review the `specifications published by OGC "
"<https://www.ogc.org/standard/sfa/>`__. For historical reasons, GDAL uses"
" the \"OGR\" prefix to denote types and functions that apply only to "
"vector data."
msgstr ""
"このページでは,ベクターデータの処理に使用されるクラスについて説明します."
"多くのデータ タイプとメソッド名は OGC シンプル フィーチャ データ モデル"
"に基づいているため, `specifications published by OGC "
"<https://www.ogc.org/standard/sfa/>`__ を確認すると役立つ場合があります."
"歴史的な理由から,GDAL ではベクターデータにのみ適用されるタイプと関数を示す"
"ために \"OGR\" プレフィックスを使用しています."

#: ../../source/user/vector_data_model.rst:11
msgid "Class Overview"
msgstr "クラス概要"

#: ../../source/user/vector_data_model.rst:13
msgid "The following classes form the core of the vector data model:"
msgstr "以下のクラスがベクターデータモデルの中核を形成します:"

#: ../../source/user/vector_data_model.rst:15
msgid ""
"Geometry (:ref:`ogr_geometry.h <ogrgeometry_cpp>`): The geometry classes "
"(:cpp:class:`OGRGeometry`, etc) encapsulate the OGC vector data types. "
"They provide some geometry operations and translation to/from well known "
"binary and text format. A geometry includes a spatial reference system "
"(projection)."
msgstr ""
"ジオメトリ (:ref:`ogr_geometry.h <ogrgeometry_cpp>`): ジオメトリクラス"
" (:cpp:class:`OGRGeometry`, など) は OGC ベクターデータ型をカプセル化し"
"ます. いくつかのジオメトリ操作と, 既知のバイナリおよびテキスト形式への変換"
"を提供します. ジオメトリには空間参照系(投影)が含まれます."

#: ../../source/user/vector_data_model.rst:16
msgid ""
"Spatial Reference (:ref:`ogr_spatialref.h <ogrspatialref>`): An "
":cpp:class:`OGRSpatialReference` encapsulates the definition of a "
"projection and datum."
msgstr ""
"空間参照 (:ref:`ogr_spatialref.h <ogrspatialref>`): "
":cpp:class:`OGRSpatialReference` は投影と測地系の定義をカプセル化します."

#: ../../source/user/vector_data_model.rst:17
msgid ""
"Feature (:ref:`ogr_feature.h <ogrfeature_cpp>`): The "
":cpp:class:`OGRFeature` encapsulates the definition of a whole feature, "
"that is a set of geometries and attributes relating to a single entity."
msgstr ""
"地物 (:ref:`ogr_feature.h <ogrfeature_cpp>`): "
":cpp:class:`OGRFeature` は, 1 つのエンティティに関連するジオメトリと属性の"
"セットをカプセル化します."

#: ../../source/user/vector_data_model.rst:18
msgid ""
"Feature Class Definition (:ref:`ogr_feature.h <ogrfeature_cpp>`): The "
":cpp:class:`OGRFeatureDefn` class captures the schema (set of field "
"definitions) for a group of related features (normally a whole layer)."
msgstr ""
"地物クラス定義 (:ref:`ogr_feature.h <ogrfeature_cpp>`): "
":cpp:class:`OGRFeatureDefn` クラスは, 関連する地物のスキーマ(フィールド定義の"
"セット)をキャプチャします(通常は全レイヤー)."

#: ../../source/user/vector_data_model.rst:19
msgid ""
"Layer (:ref:`ogrsf_frmts.h <ogrlayer_cpp>`): :cpp:class:`OGRLayer` is an "
"abstract class representing a layer of features in a "
":cpp:class:`GDALDataset`."
msgstr ""
"レイヤー (:ref:`ogrsf_frmts.h <ogrlayer_cpp>`): "
":cpp:class:`OGRLayer` は, :cpp:class:`GDALDataset` の地物レイヤーを表す抽象"
"クラスです."

#: ../../source/user/vector_data_model.rst:20
msgid ""
"Dataset (:ref:`gdal_priv.h <gdaldataset_cpp>`): A "
":cpp:class:`GDALDataset` is an abstract base class representing a file or"
" database containing one or more :cpp:class:`OGRLayer` objects."
msgstr ""
"データセット (:ref:`gdal_priv.h <gdaldataset_cpp>`): "
":cpp:class:`GDALDataset` は, 1 つ以上の :cpp:class:`OGRLayer` オブジェクトを"
"含むファイルまたはデータベースを表す抽象基底クラスです."

#: ../../source/user/vector_data_model.rst:21
msgid ""
"Drivers (:ref:`gdal_priv.h <gdaldriver_cpp>`): A :cpp:class:`GDALDriver` "
"represents a translator for a specific format, capable of opening and "
"possibly writing :cpp:class:`GDALDataset` objects. All available drivers "
"are managed by the :cpp:class:`GDALDriverManager`."
msgstr ""
"ドライバー (:ref:`gdal_priv.h <gdaldriver_cpp>`): "
":cpp:class:`GDALDriver` は, 特定の形式のための変換プログラムを表し, "
":cpp:class:`GDALDataset` オブジェクトを開いたり, 書き込んだりすることができ"
"ます. 利用可能なすべてのドライバーは :cpp:class:`GDALDriverManager` によって"
"管理されます."

#: ../../source/user/vector_data_model.rst:24
msgid "Geometry"
msgstr "ジオメトリ"

#: ../../source/user/vector_data_model.rst:26
msgid ""
"Individual geometry classes are used to represent the different types of "
"vector geometry. All the geometry classes derive from "
":cpp:class:`OGRGeometry` which defines the common functionality of all "
"geometries. Geometry types include :cpp:class:`OGRPoint`, "
":cpp:class:`OGRLineString`, :cpp:class:`OGRPolygon`, "
":cpp:class:`OGRGeometryCollection`, :cpp:class:`OGRMultiPoint`, "
":cpp:class:`OGRMultiLineString`, :cpp:class:`OGRMultiPolygon`, and "
":cpp:class:`OGRPolyhedralSurface`. The special case of a triangular "
"polygon can be represented as a :cpp:class:`OGRTriangle`, a non-"
"overlapping collection of which can be represented by an "
":cpp:class:`OGRTriangulatedSurface`. An additional set of types is used "
"to store non-linear geometries: :cpp:class:`OGRCircularString`, "
":cpp:class:`OGRCompoundCurve`, :cpp:class:`OGRCurvePolygon`, "
":cpp:class:`OGRMultiCurve` and :cpp:class:`OGRMultiSurface`."
msgstr ""
"個々のジオメトリクラスは, 異なる種類のベクタージオメトリを表すために使用され"
"ます. すべてのジオメトリクラスは, すべてのジオメトリの共通機能を定義する "
":cpp:class:`OGRGeometry` から派生しています. ジオメトリタイプには, "
":cpp:class:`OGRPoint`, :cpp:class:`OGRLineString`, :cpp:class:`OGRPolygon`, "
":cpp:class:`OGRGeometryCollection`, :cpp:class:`OGRMultiPoint`, "
":cpp:class:`OGRMultiLineString`, :cpp:class:`OGRMultiPolygon`, "
":cpp:class:`OGRPolyhedralSurface` が含まれます. 三角形ポリゴンの特殊な場合"
"は :cpp:class:`OGRTriangle` として表すことができ, その非重複コレクションは "
":cpp:class:`OGRTriangulatedSurface` で表すことができます. 非線形ジオメトリを"
"格納するために追加のタイプが使用されます: :cpp:class:`OGRCircularString`, "
":cpp:class:`OGRCompoundCurve`, :cpp:class:`OGRCurvePolygon`, "
":cpp:class:`OGRMultiCurve`, :cpp:class:`OGRMultiSurface` です."

#: ../../source/user/vector_data_model.rst:30
msgid ""
"Any of the above geometry classes can store coordinates in two (XY), "
"three (XYZ or XYM), or four (XYZM) dimensions."
msgstr ""
"上記のいずれかのジオメトリクラスは, 2 (XY), 3 (XYZ または XYM), または 4 "
"(XYZM) 次元で座標を格納することができます."

#: ../../source/user/vector_data_model.rst:32
msgid ""
"Additional intermediate classes contain functionality that is used by "
"multiple geometry types. These include :cpp:class:`OGRCurve` (base class "
"for :cpp:class:`OGRLineString`) and :cpp:class:`OGRSurface` (base class "
"for :cpp:class:`OGRPolygon`). Some intermediate interfaces modeled in the"
" simple features abstract model and SFCOM are not modeled in OGR at this "
"time. In most cases the methods are aggregated into other classes."
msgstr ""
"複数のジオメトリタイプで使用される機能を含む追加の中間クラスがあります. これ"
"らには, :cpp:class:`OGRCurve` (:cpp:class:`OGRLineString` の基本クラス) と "
":cpp:class:`OGRSurface` (:cpp:class:`OGRPolygon` の基本クラス) が含まれます. "
"シンプルフィーチャ抽象モデルと SFCOM でモデル化されたいくつかの中間インタフェー"
"スは, この時点では OGR でモデル化されていません. ほとんどの場合, メソッドは他の"
"クラスに集約されます."

#: ../../source/user/vector_data_model.rst:-1
msgid "Diagram of OGRGeometry and subclasses"
msgstr "OGRGeometry およびサブクラスの図"

#: ../../source/user/vector_data_model.rst:37
msgid ""
"The :cpp:class:`OGRGeometryFactory` is used to convert well known text "
"(WKT) and well known binary (WKB) format data into the appropriate "
":cpp:class:`OGRGeometry` subclass. These are predefined ASCII and binary "
"formats for representing all the types of simple features geometries."
msgstr ""
":cpp:class:`OGRGeometryFactory` は, well known text (WKT) および well known binary"
"(WKB) 形式のデータを適切な :cpp:class:`OGRGeometry` サブクラスに変換するため"
"に使用されます. これらは, すべてのシンプルフィーチャジオメトリの種類を表すため"
"の事前定義の ASCII およびバイナリ形式です."

#: ../../source/user/vector_data_model.rst:39
msgid ""
"The :cpp:class:`OGRGeometry` includes a reference to an "
":cpp:class:`OGRSpatialReference` object, defining the spatial reference "
"system of that geometry. This is normally a reference to a shared spatial"
" reference object with reference counting for each of the "
":cpp:class:`OGRGeometry` objects using it."
msgstr ""
":cpp:class:`OGRGeometry` には, そのジオメトリの空間参照系を定義する "
":cpp:class:`OGRSpatialReference` オブジェクトへの参照が含まれています. これは, "
"通常, それを使用する各 :cpp:class:`OGRGeometry` オブジェクトに対して参照カウン"
"トを持つ共有空間参照オブジェクトへの参照です."

#: ../../source/user/vector_data_model.rst:41
msgid ""
"While it is theoretically possible to derive other or more specific "
"geometry classes from the existing :cpp:class:`OGRGeometry` classes, this"
" isn't an aspect that has been well thought out. In particular, it would "
"be possible to create specialized classes using the "
":cpp:class:`OGRGeometryFactory` without modifying it."
msgstr ""
"理論的には, 既存の :cpp:class:`OGRGeometry` クラスから他のまたはより具体的な"
"ジオメトリクラスを派生させることが可能ですが, これは十分に考慮されていない側面"
"です. 特に, :cpp:class:`OGRGeometryFactory` を変更せずに, 専用のクラスを作成する"
"ことが可能です."

#: ../../source/user/vector_data_model.rst:44
msgid "Compatibility issues with non-linear geometries"
msgstr "非線形ジオメトリとの互換性の問題"

#: ../../source/user/vector_data_model.rst:46
msgid ""
"Generic mechanisms have been introduced so that creating or modifying a "
"feature with a non-linear geometry in a layer of a driver that does not "
"support it will transform that geometry in the closest matching linear "
"geometry. This linearization can be controlled using "
":ref:`configoptions_vector`."
msgstr ""
"非線形ジオメトリを持つレイヤーのドライバーで非線形ジオメトリを持つ地物を作成"
"または変更すると, そのジオメトリが最も近い一致する線形ジオメトリに変換される"
"ように, 一般的なメカニズムが導入されました. この線形化は, "
":ref:`configoptions_vector` を使用して制御できます."

#: ../../source/user/vector_data_model.rst:48
msgid ""
"On the other side, when retrieving data from the OGR C API, the "
":cpp:func:`OGRSetNonLinearGeometriesEnabledFlag` function can be used, so"
" that geometries and layer geometry type returned are also converted to "
"their linear approximation if necessary."
msgstr ""
"一方, OGR C API からデータを取得する場合, "
":cpp:func:`OGRSetNonLinearGeometriesEnabledFlag` 関数を使用して, 必要に応じて"
"ジオメトリとレイヤーのジオメトリタイプが線形近似に変換されるようにすることが"
"できます."

#: ../../source/user/vector_data_model.rst:51
msgid "Spatial Reference"
msgstr "空間参照"

#: ../../source/user/vector_data_model.rst:53
msgid ""
"The :cpp:class:`OGRSpatialReference` class is intended to store an "
"OpenGIS Spatial Reference System definition. Currently local, geographic "
"and projected coordinate systems are supported. Vertical coordinate "
"systems, geocentric coordinate systems, and compound (horizontal + "
"vertical) coordinate systems are as well supported in recent GDAL "
"versions."
msgstr ""
":cpp:class:`OGRSpatialReference` クラスは, OpenGIS 空間参照系定義を格納すること"
"を意図しています. 現在, ローカル, 地理的, 投影座標系がサポートされています. 垂"
"直座標系, 地心座標系, および複合(水平 + 垂直)座標系も, 最近の GDAL バージョン"
"でサポートされています."

#: ../../source/user/vector_data_model.rst:55
msgid ""
"The spatial coordinate system data model is inherited from the OpenGIS "
"Well Known Text format. A simple form of this is defined in the Simple "
"Features specifications. A more sophisticated form is found in the "
"Coordinate Transformation specification. The "
":cpp:class:`OGRSpatialReference` is built on the features of the "
"Coordinate Transformation specification but is intended to be compatible "
"with the earlier simple features form."
msgstr ""
"空間座標系データモデルは, OpenGIS Well Known Text 形式から継承されています. これ"
"の単純な形式は, シンプルフィーチャ仕様で定義されています. より洗練された形式は, "
"座標変換仕様で見つかります. :cpp:class:`OGRSpatial"
"Reference` は, 座標変換仕様の機能に基づいて構築されていますが, 以前のシンプル"
"フィーチャ形式と互換性があるように意図されています."

#: ../../source/user/vector_data_model.rst:57
msgid ""
"There is also an associated :cpp:class:`OGRCoordinateTransformation` "
"class that encapsulates use of |PROJ| for converting between different "
"coordinate systems."
msgstr ""
"異なる座標系間での変換に |PROJ| を使用するための :cpp:class:`OGRCoordinate"
"Transformation` クラスも関連付けられています."

#: ../../source/user/vector_data_model.rst:60
msgid "Feature / Feature Definition"
msgstr "地物 / 地物定義"

#: ../../source/user/vector_data_model.rst:62
msgid ""
"The :cpp:class:`OGRGeometry` captures the geometry of a vector feature. "
"The :cpp:class:`OGRFeature` contains geometry, and adds feature "
"attributes, feature id, and a feature class identifier. It may also "
"contain styling information. Several geometries can be associated with an"
" :cpp:class:`OGRFeature`."
msgstr ""
":cpp:class:`OGRGeometry` はベクター地物のジオメトリをキャプチャします. "
":cpp:class:`OGRFeature` はジオメトリを含み, 地物属性, 地物 ID, および地物クラス"
"識別子を追加します. スタイル情報も含むことができます. 複数のジオメトリを "
":cpp:class:`OGRFeature` に関連付けることができます."

#: ../../source/user/vector_data_model.rst:64
msgid ""
"The set of attributes (:cpp:class:`OGRFieldDefn`), their types, names and"
" so forth is represented via the :cpp:class:`OGRFeatureDefn` class. One "
":cpp:class:`OGRFeatureDefn` normally exists for a layer of features. The "
"same definition is shared in a reference counted manner by the feature of"
" that type (or feature class)."
msgstr ""
"属性のセット (:cpp:class:`OGRFieldDefn`), そのタイプ, 名前などは, "
":cpp:class:`OGRFeatureDefn` クラスを介して表現されます. 通常, 1 つの "
":cpp:class:`OGRFeatureDefn` は地物のレイヤーに存在します. 同じ定義は, そのタイプ"
"(または地物クラス)の地物に対して参照カウントされた方法で共有されます."

#: ../../source/user/vector_data_model.rst:66
msgid ""
"The feature id (FID) of a feature is intended to be a unique identifier "
"for the feature within the layer it is a member of. Freestanding "
"features, or features not yet written to a layer may have a null "
"(OGRNullFID) feature id. The feature ids are modeled in OGR as a 64-bit "
"integer; however, this is not sufficiently expressive to model the "
"natural feature ids in some formats. For instance, the GML feature id is "
"a string."
msgstr ""
"地物の地物 ID (FID) は, その地物が所属するレイヤー内での地物の一意の識別子である"
"ことを意図しています. 独立した地物, またはまだレイヤーに書き込まれていない地物は, "
"null (OGRNullFID) 地物 ID を持つことができます. 地物 ID は OGR で 64 ビット整"
"数としてモデル化されていますが, これは一部の形式の自然な地物 ID をモデル化する"
"には十分な表現力を持っていません. たとえば, GML 地物 ID は文字列です."

#: ../../source/user/vector_data_model.rst:68
msgid ""
"The :cpp:class:`OGRFeatureDefn` also contains an indicator of the types "
"of geometry allowed for that feature class (returned as an "
":cpp:enum:`OGRwkbGeometryType` from "
":cpp:func:`OGRFeatureDefn::GetGeomType`). If this is "
":cpp:enumerator:`OGRwkbGeometryType::wkbUnknown` then any type of "
"geometry is allowed. This implies that features in a given layer can "
"potentially be of different geometry types though they will always share "
"a common attribute schema."
msgstr ""
":cpp:class:`OGRFeatureDefn` には, その地物クラスに許可されているジオメトリのタイプ"
"の指示子も含まれています (:cpp:func:`OGRFeatureDefn::GetGeomType` から "
":cpp:enum:`OGRwkbGeometryType` として返されます). これが "
":cpp:enumerator:`OGRwkbGeometryType::wkbUnknown` の場合, 任意のタイプのジオメトリ"
"が許可されます. これは, 与えられたレイヤーの地物が異なるジオメトリタイプである可"
"能性があることを意味しますが, それらは常に共通の属性スキーマを共有します."

#: ../../source/user/vector_data_model.rst:70
msgid ""
"Several geometry fields (:cpp:class:`OGRGeomFieldDefn`) can be associated"
" with an :cpp:class:`OGRFeatureDefn`. Each geometry field has its own "
"indicator of geometry type allowed, returned by "
":cpp:func:`OGRGeomFieldDefn::GetType`, and its spatial reference system, "
"returned by :cpp:func:`OGRGeomFieldDefn::GetSpatialRef`."
msgstr ""
"複数のジオメトリフィールド (:cpp:class:`OGRGeomFieldDefn`) を "
":cpp:class:`OGRFeatureDefn` に関連付けることができます. 各ジオメトリフィールドに"
"は, その許可されているジオメトリタイプの指示子があり, "
":cpp:func:`OGRGeomFieldDefn::GetType` によって返され, その空間参照系があり, "
":cpp:func:`OGRGeomFieldDefn::GetSpatialRef` によって返されます."

#: ../../source/user/vector_data_model.rst:72
msgid ""
"The :cpp:class:`OGRFeatureDefn` also contains a feature class name "
"(normally used as a layer name)."
msgstr ""
":cpp:class:`OGRFeatureDefn` には, 地物クラス名 (通常はレイヤー名として使用される)"
"も含まれています."

#: ../../source/user/vector_data_model.rst:75
msgid "Field Definitions"
msgstr "フィールド定義"

#: ../../source/user/vector_data_model.rst:77
msgid ""
"The behavior of each field in a feature class is defined by a shared "
":cpp:class:`OGRFieldDefn`. The :cpp:class:`OGRFieldDefn` specifies the "
"field type from the values of :cpp:enum:`OGRFieldType`. Values stored in "
"this field may be further restricted according to a "
":cpp:enum:`OGRFieldSubType`. For example, a field may have a type of "
":cpp:enumerator:`OGRFieldType::OFTInteger` with a subtype of "
":cpp:enumerator:`OGRFieldSubType::OFSTBoolean`."
msgstr ""
"地物クラスの各フィールドの動作は, 共有された :cpp:class:`OGRFieldDefn` によって"
"定義されます. :cpp:class:`OGRFieldDefn` は, :cpp:enum:`OGRFieldType` の値からフィ"
"ールドタイプを指定します. このフィールドに格納される値は, "
":cpp:enum:`OGRFieldSubType` に従ってさらに制限される場合があります. たとえば, "
"フィールドは, :cpp:enumerator:`OGRFieldType::OFTInteger` タイプで, "
":cpp:enumerator:`OGRFieldSubType::OFSTBoolean` サブタイプを持つことがあります."

#: ../../source/user/vector_data_model.rst:82
msgid ""
"The :cpp:class:`OGRFieldDefn` can also track whether a field is allowed "
"to be null (:cpp:func:`OGRFieldDefn::IsNullable`), whether its value must"
" be unique (:cpp:func:`OGRFieldDefn::IsUnique`), and formatting "
"information such as the number of decimal digits, width, and "
"justification. It may also define a default value in case one is not "
"manually specified."
msgstr ""
":cpp:class:`OGRFieldDefn` は, フィールドが null に許可されているかどうか "
"(:cpp:func:`OGRFieldDefn::IsNullable`), その値が一意である必要があるかどうか "
"(:cpp:func:`OGRFieldDefn::IsUnique`), および小数桁数, 幅, および整列などのフォー"
"マット情報を追跡することもできます. 手動で指定されていない場合, デフォルト値を"
"定義することもできます."

#: ../../source/user/vector_data_model.rst:85
msgid "Field Domains"
msgstr "フィールドドメイン"

#: ../../source/user/vector_data_model.rst:87
msgid ""
"Some formats support the use of field domains that describe the values "
"that can be stored in a given attribute field. An "
":cpp:class:`OGRFieldDefn` may reference a single "
":cpp:class:`OGRFieldDomain` that is associated with a "
":cpp:class:`GDALDataset`. Programs using GDAL may use the "
":cpp:class:`OGRFieldDomain` to appropriately constrain user input. GDAL "
"does not perform validation itself and will allow the storage of values "
"that violate a field's associated :cpp:class:`OGRFieldDomain`."
msgstr ""
"一部の形式は, 特定の属性フィールドに格納できる値を記述するフィールドドメインの使"
"用をサポートしています. :cpp:class:`OGRFieldDefn` は, :cpp:class:`GDALDataset` に"
"関連付けられた単一の :cpp:class:`OGRFieldDomain` を参照することができます. GDAL"
"を使用するプログラムは, :cpp:class:`OGRFieldDomain` を使用してユーザー入力を適切"
"に制約することができます. GDAL は自体で検証を実行せず, フィールドに関連付けられ"
"た :cpp:class:`OGRFieldDomain` を違反する値の格納を許可します."

#: ../../source/user/vector_data_model.rst:90
msgid "Available types of :cpp:class:`OGRFieldDomain` include:"
msgstr ":cpp:class:`OGRFieldDomain` の利用可能なタイプには次のものがあります:"

#: ../../source/user/vector_data_model.rst:92
msgid ""
":cpp:class:`OGRCodedFieldDomain`, which constrains values those present "
"in a specified enumeration"
msgstr ""
":cpp:class:`OGRCodedFieldDomain`, 指定された列挙に存在する値を制約"
"します"

#: ../../source/user/vector_data_model.rst:93
msgid ""
":cpp:class:`OGRRangeFieldDomain`, which constrains values to a specified "
"range"
msgstr ""
":cpp:class:`OGRRangeFieldDomain`, 指定された範囲の値を制約"
"します"

#: ../../source/user/vector_data_model.rst:94
msgid ""
":cpp:class:`OGRGlobFieldDomain`, which constrains values to those "
"matching a specified pattern"
msgstr ""
":cpp:class:`OGRGlobFieldDomain`, 指定されたパターンに一致する"
"値を制約します"

#: ../../source/user/vector_data_model.rst:96
msgid ""
"Additionally, an :cpp:class:`OGRFieldDomain` may define policies "
"describing the values that should be assigned to domain-controlled fields"
" when features are split or merged."
msgstr ""
"さらに, :cpp:class:`OGRFieldDomain` は, 地物が分割または結合されたときに, ドメイン"
"制御フィールドに割り当てるべき値を記述するポリシーを定義することができます."

#: ../../source/user/vector_data_model.rst:99
msgid "Layer"
msgstr "レイヤー"

#: ../../source/user/vector_data_model.rst:101
msgid ""
"An :cpp:class:`OGRLayer` represents a layer of features within a data "
"source. All features in an :cpp:class:`OGRLayer` share a common schema "
"and are of the same :cpp:class:`OGRFeatureDefn`. An :cpp:class:`OGRLayer`"
" class also contains methods for reading features from the data source. "
"The :cpp:class:`OGRLayer` can be thought of as a gateway for reading and "
"writing features from an underlying data source such as a file on disk, "
"or the result of a database query."
msgstr ""
":cpp:class:`OGRLayer` は, データソース内の地物レイヤーを表します. "
":cpp:class:`OGRLayer` 内のすべての地物は共通のスキーマを共有し, 同じ "
":cpp:class:`OGRFeatureDefn` です. :cpp:class:`OGRLayer` クラスには, データソース"
"から地物を読み取るためのメソッドも含まれています. :cpp:class:`OGRLayer` は, ディ"
"スク上のファイルやデータベースクエリの結果など, 下位のデータソースから地物を読"
"み書きするためのゲートウェイと考えることができます."

#: ../../source/user/vector_data_model.rst:103
msgid ""
"The :cpp:class:`OGRLayer` includes methods for sequential and random "
"reading and writing. Read access (via the "
":cpp:func:`OGRLayer::GetNextFeature` method) normally reads all features,"
" one at a time sequentially; however, it can be limited to return "
"features intersecting a particular geographic region by installing a "
"spatial filter on the :cpp:class:`OGRLayer` (via the "
":cpp:func:`OGRLayer::SetSpatialFilter` method). A filter on attributes "
"can only be set with the :cpp:func:`OGRLayer::SetAttributeFilter` method."
" By default, all available attributes and geometries are read but this "
"can be controlled by flagging fields as ignored "
"(:cpp:func:`OGRLayer::SetIgnoredFields`)."
msgstr ""
":cpp:class:`OGRLayer` には, 順次およびランダムな読み取りおよび書き込みのためのメ"
"ソッドが含まれています. 読み取りアクセス (:cpp:func:`OGRLayer::GetNextFeature` "
"メソッドを介して) は通常, 1 回に 1 つずつすべての地物を順次読み取ります; ただし, "
":cpp:class:`OGRLayer` に空間フィルタを設定することで, 特定の地理的領域に交差す"
"る地物を返すように制限することができます (:cpp:func:`OGRLayer::SetSpatialFilter`"
" メソッドを介して). 属性に対するフィルタは, :cpp:func:`OGRLayer::SetAttributeFilter`"
" メソッドでのみ設定できます. デフォルトでは, すべての利用可能な属性とジオメトリが"
"読み取られますが, これはフィールドを無視するようにフラグを立てることで制御できま"
"す (:cpp:func:`OGRLayer::SetIgnoredFields`)."

#: ../../source/user/vector_data_model.rst:105
msgid ""
"Starting with GDAL 3.6, as an alternative to getting features through "
"``GetNextFeature``, it is possible to retrieve them by batches, with a "
"column-oriented memory layout, using the "
":cpp:func:`OGRLayer::GetArrowStream` method (cf "
":ref:`vector_api_tut_arrow_stream`)."
msgstr ""
"GDAL 3.6 以降, ``GetNextFeature`` を介して地物を取得する代わりに, "
":cpp:func:`OGRLayer::GetArrowStream` メソッドを使用して, バッチで地物を取得し, "
"列指向のメモリレイアウトで取得することができます (cf "
":ref:`vector_api_tut_arrow_stream`)."

#: ../../source/user/vector_data_model.rst:107
msgid ""
"An :cpp:class:`OGRLayer` may also store an :cpp:class:`OGRStyleTable` "
"that provides a set of styles that may be used by features in the layer. "
"More information on GDAL's handling of feature styles can be found in the"
" :ref:`ogr_feature_style`."
msgstr ""
":cpp:class:`OGRLayer` には, レイヤー内の地物で使用できるスタイルセットを提供する "
":cpp:class:`OGRStyleTable` を格納することもできます. 地物スタイルの GDAL の処理"
"に関する詳細は, :ref:`ogr_feature_style` にあります."

#: ../../source/user/vector_data_model.rst:109
msgid ""
"One flaw in the current OGR architecture is that the spatial and "
"attribute filters are set directly on the :cpp:class:`OGRLayer` which is "
"intended to be the only representative of a given layer in a data source."
" This means it isn't possible to have multiple read operations active at "
"one time with different spatial filters on each."
msgstr ""
"現在の OGR アーキテクチャの欠点の 1 つは, 空間フィルタと属性フィルタが, データソー"
"ス内の特定のレイヤーの唯一の代表であることを意図している :cpp:class:`OGRLayer` に"
"直接設定されていることです. これは, 各々に異なる空間フィルタが設定された複数の読"
"み取り操作を同時にアクティブにすることができないことを意味します."

#: ../../source/user/vector_data_model.rst:114
msgid ""
"Another question that might arise is why the :cpp:class:`OGRLayer` and "
":cpp:class:`OGRFeatureDefn` classes are distinct. An "
":cpp:class:`OGRLayer` always has a one-to-one relationship to an "
":cpp:class:`OGRFeatureDefn`, so why not amalgamate the classes? There are"
" two reasons:"
msgstr ""
"もう 1 つの疑問は, なぜ :cpp:class:`OGRLayer` と :cpp:class:`OGRFeature"
"Defn` クラスが異なるのかということです. :cpp:class:`OGRLayer` は常に "
":cpp:class:`OGRFeatureDefn` との一対一の関係を持つため, なぜクラスを統合しないの"
"でしょうか? その理由は 2 つあります:"

#: ../../source/user/vector_data_model.rst:116
msgid ""
"As defined now :cpp:class:`OGRFeature` and :cpp:class:`OGRFeatureDefn` "
"don't depend on :cpp:class:`OGRLayer`, so they can exist independently in"
" memory without regard to a particular layer in a data store."
msgstr ""
"現在の定義では, :cpp:class:`OGRFeature` と :cpp:class:`OGRFeature"
"Defn` は :cpp:class:`OGRLayer` に依存していないため, データストア内の特定のレイヤ"
"ーに関係なく, メモリ内で独立して存在することができます."

#: ../../source/user/vector_data_model.rst:117
msgid ""
"The SF CORBA model does not have a concept of a layer with a single fixed"
" schema the way that the SFCOM and SFSQL models do. The fact that "
"features belong to a feature collection that is potentially not directly "
"related to their current feature grouping may be important to "
"implementing SFCORBA support using OGR."
msgstr ""
"SF CORBA モデルには, SFCOM および SFSQL モデルのように, 単一の固定スキーマを持つ"
"レイヤーの概念がありません. 地物が現在の地物グループに直接関連していない可能性の"
"ある地物コレクションに属しているという事実は, OGR を使用して SFCORBA サポートを実"
"装する際に重要かもしれません."

#: ../../source/user/vector_data_model.rst:119
msgid ""
"The :cpp:class:`OGRLayer` class is an abstract base class. An "
"implementation is expected to be subclassed for each file format driver "
"implemented. OGRLayers are normally owned directly by their "
":cpp:class:`GDALDataset`, and aren't instantiated or destroyed directly."
msgstr ""
":cpp:class:`OGRLayer` クラスは抽象基底クラスです. 実装は, 実装された各ファイル形"
"式ドライバーに対してサブクラス化されることが期待されています. OGRLayer は通常, "
"直接 :cpp:class:`GDALDataset` によって所有され, 直接インスタンス化または破棄され"
"ません."

#: ../../source/user/vector_data_model.rst:123
msgid "Dataset"
msgstr "データセット"

#: ../../source/user/vector_data_model.rst:125
msgid ""
"A :cpp:class:`GDALDataset` represents a set of :cpp:class:`OGRLayer` "
"objects. This usually represents a single file, set of files, database or"
" gateway. A :cpp:class:`GDALDataset` has a list of :cpp:class:`OGRLayer` "
"which it owns but can return references to."
msgstr ""
":cpp:class:`GDALDataset` は, :cpp:class:`OGRLayer` オブジェクトのセットを表します."
" これは通常, 単一のファイル, ファイルセット, データベース, またはゲートウェイを表し"
"ます. :cpp:class:`GDALDataset` には, 所有している :cpp:class:`OGRLayer` のリストが"
"ありますが, 参照を返すこともできます."

#: ../../source/user/vector_data_model.rst:127
msgid ""
":cpp:class:`GDALDataset` is an abstract base class. An implementation is "
"expected to be subclassed for each file format driver implemented. "
":cpp:class:`GDALDataset` objects are not normally instantiated directly "
"but rather with the assistance of an :cpp:class:`GDALDriver`. Deleting an"
" :cpp:class:`GDALDataset` closes access to the underlying persistent data"
" source, but does not normally result in deletion of that file."
msgstr ""
":cpp:class:`GDALDataset` は抽象基底クラスです. 実装は, 実装された各ファイル形式"
"ドライバーに対してサブクラス化されることが期待されています. "
":cpp:class:`GDALDataset` オブジェクトは通常, 直接インスタンス化されるのではなく, "
":cpp:class:`GDALDriver` の支援を受けてインスタンス化されます. "
":cpp:class:`GDALDataset` を削除すると, 下位の永続データソースへのアクセスが閉じら"
"れますが, 通常, そのファイルが削除されることはありません."

#: ../../source/user/vector_data_model.rst:129
msgid ""
"A :cpp:class:`GDALDataset` has a name (usually a filename or database "
"connection string) that can be used to reopen the data source with a "
":cpp:class:`GDALDriver`."
msgstr ""
":cpp:class:`GDALDataset` には, データソースを :cpp:class:`GDALDriver` で再オープン"
"するために使用できる名前 (通常はファイル名またはデータベース接続文字列) がありま"
"す."

#: ../../source/user/vector_data_model.rst:131
msgid ""
"The :cpp:class:`GDALDataset` also has support for executing a datasource "
"specific command, normally a form of SQL. This is accomplished via the "
":cpp:func:`GDALDataset::ExecuteSQL` method. While some datasources (such "
"as PostGIS and Oracle) pass the SQL through to an underlying database, "
"OGR also includes support for evaluating a subset of the SQL SELECT "
"statement against any datasource (see :ref:`ogr_sql_sqlite_dialect`.)"
msgstr ""
":cpp:class:`GDALDataset` には, 通常 SQL の形式のデータソース固有のコマンドを実行"
"するサポートもあります. これは, :cpp:func:`GDALDataset::ExecuteSQL` メソッドを介し"
"て実行されます. 一部のデータソース (PostGIS や Oracle など) は SQL を下位のデータ"
"ベースに渡しますが, OGR は任意のデータソースに対して SQL SELECT 文のサブセットを"
"評価するサポートも提供しています (:ref:`ogr_sql_sqlite_dialect` を参照)."

#: ../../source/user/vector_data_model.rst:133
msgid ""
"When using some drivers, the :cpp:class:`GDALDataset` also offers a "
"mechanism for to start, commit, and rollback transactions when "
"interacting with the underlying data store."
msgstr ""
"一部のドライバを使用する場合, :cpp:class:`GDALDataset` は, 下位のデータストアとや"
"り取りするときにトランザクションを開始, コミット, ロールバックするメカニズムも提"
"供しています."

#: ../../source/user/vector_data_model.rst:136
msgid ""
"A :cpp:class:`GDALDataset` may also be aware of relationships between "
"layers (e.g., a foreign key relationship between database tables). "
"Information about these relationships is stored in a "
":cpp:class:`GDALRelationshp`."
msgstr ""
":cpp:class:`GDALDataset` は, レイヤー間の関係 (たとえば, データベーステーブル間の"
"外部キー関係) についても認識することができます. これらの関係に関する情報は, "
":cpp:class:`GDALRelationshp` に格納されます."

#: ../../source/user/vector_data_model.rst:140
msgid ""
"Earlier versions of GDAL represented vector datasets using the "
":cpp:class:`OGRDataSource` class. This class has been maintained for "
"backwards compatibility but is functionally equivalent to a "
":cpp:class:`GDALDataset` for vector data."
msgstr ""
"以前のバージョンの GDAL では, ベクターデータセットを :cpp:class:`OGRDataSource` "
"クラスを使用して表現していました. このクラスは後方互換性のために維持されています"
"が, ベクターデータに対しては :cpp:class:`GDALDataset` と機能的に同等です."

#: ../../source/user/vector_data_model.rst:143
msgid "Drivers"
msgstr "ドライバー"

#: ../../source/user/vector_data_model.rst:145
msgid ""
"A :cpp:class:`GDALDriver` object is instantiated for each file format "
"supported. The :cpp:class:`GDALDriver` objects are registered with the "
":cpp:class:`GDALDriverManager`, a singleton class that is normally used "
"to open new datasets."
msgstr ""
"サポートされている各ファイル形式に対して :cpp:class:`GDALDriver` オブジェクトがイン"
"スタンス化されます. 通常, 新しいデータセットを開くために使用されるシングルトンクラ"
"スである :cpp:class:`GDALDriverManager` に :cpp:class:`GDALDriver` オブジェクトが登"
"録されます."

#: ../../source/user/vector_data_model.rst:147
msgid ""
"It is intended that a new :cpp:class:`GDALDriver` object is instantiated "
"and define function pointers for operations like Identify(), Open() for "
"each file format to be supported (along with a file format specific "
":cpp:class:`GDALDataset`, and :cpp:class:`OGRLayer` classes)."
msgstr ""
"新しい :cpp:class:`GDALDriver` オブジェクトが, サポートされる各ファイル形式に対し"
"て Identify(), Open() などの操作のための関数ポインタを定義し, インスタンス化される"
"ことが意図されています (:cpp:class:`GDALDataset` および :cpp:class:`OGRLayer` クラス"
"を含むファイル形式固有のクラスとともに)."

#: ../../source/user/vector_data_model.rst:149
msgid ""
"On application startup registration functions are normally called for "
"each desired file format. These functions instantiate the appropriate "
":cpp:class:`GDALDriver` objects, and register them with the "
":cpp:class:`GDALDriverManager`. When a dataset is to be opened, the "
"driver manager will normally try each :cpp:class:`GDALDataset` in turn, "
"until one succeeds, returning a :cpp:class:`GDALDataset` object."
msgstr ""
"アプリケーションの起動時には, 各所望のファイル形式に対して登録関数が通常呼び出さ"
"れます. これらの関数は適切な :cpp:class:`GDALDriver` オブジェクトをインスタンス"
"化し, それらを :cpp:class:`GDALDriverManager` に登録します. データセットを開くとき"
"には, ドライバーマネージャは通常, 1 つずつ各 :cpp:class:`GDALDataset` を試し, 成功"
"するまで続け, :cpp:class:`GDALDataset` オブジェクトを返します."

